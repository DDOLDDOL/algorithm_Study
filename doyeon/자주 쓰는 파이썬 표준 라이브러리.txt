# 2차원 리스트 초기화할 때
array = [[0] * m for _ in range(n)]

# 문자열 형식의 수학 수식 계산
eval("(3+5) * 7")
=> 56

# 정렬
sorted([9,1,8,5,4])
=> [1,4,5,8,9]
sorted([9,1,8,5,4], reverse=True)
=> [9,8,5,4,1]

# 순열
from itertools import permutations
data=['A','B']
list(permutations(data,2))
=> [('A','B'),('B','A')]

# 조합
from itertools import combinations
list(combinations(data,2))
=> [('A','B')]

# 중복 허용 순열
from itertools import product
list(product(data, repeat=2))
=> [('A','A'),('A','B'),('B','A'),('B','B')]

# 힙 기능
import heapq
def heapsort(iterable):
  h=[]
  result = []
  # 모든 원소를 차례대로 힙에 삽입
  for value in iterable:
    heapq.heappush(h, value)
  # 힙에 삽입된 모든 원소를 차례대로 꺼내어 담기
  for i in range(len(h)):
    result.append(heapq.heappop(h))
  return result
result = heapsort([1,3,5,0])
print(result)
=> [0,1,3,5]

# 큐 구현
from collections import deque
data = deque([2,3,4])
data.appendleft(1)
data.append(5)
print(data) => deque([1,2,3,4,5])
print(list(data)) => [1,2,3,4,5]
data.popleft()
print(data) => deque([2,3,4,5])

# 등장 횟수 세는 기능
from collections import Counter
counter = Counter(['red,'blue','red'])
print(counter['red']) => 2

# 팩토리얼, 제곱근, 최대공약수 등 계산
import math 
print(math.factorial(5)) => 120
print(math.sqrt(7)) => 2.64575...
print(math.gcd(21,14)) => 7
print(math.pi) => 3.1459...
print(math.e) => 2.7182....

